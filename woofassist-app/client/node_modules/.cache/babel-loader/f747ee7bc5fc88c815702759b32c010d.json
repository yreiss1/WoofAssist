{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Radar;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _d3ScaleChromatic = require(\"d3-scale-chromatic\");\n\nvar _d3Voronoi = require(\"d3-voronoi\");\n\nvar _partition3 = _interopRequireDefault(require(\"lodash/partition\"));\n\nvar _utils = require(\"./utils\");\n\nvar _RadarWrapper = _interopRequireDefault(require(\"./RadarWrapper\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction convertData(props) {\n  var data = props.data,\n      width = props.width,\n      height = props.height,\n      padding = props.padding,\n      domainMax = props.domainMax;\n  var innerHeight = height - padding * 2;\n  var innerWidth = width - padding * 2;\n\n  if (innerHeight <= 0 || innerWidth <= 0) {\n    return null;\n  }\n\n  var radius = Math.min(innerWidth / 2, innerHeight / 2);\n  var scales = (0, _utils.radiusScales)(data.variables, domainMax, radius);\n  var angleSliceRadians = Math.PI * 2 / data.variables.length;\n  var offsetAngles = {};\n  (0, _utils.forEachArray)(data.variables, function (_ref, i) {\n    var key = _ref.key;\n    offsetAngles[key] = angleSliceRadians * i;\n  });\n  var allPoints = (0, _utils.radarPoints)(data, scales, offsetAngles);\n  var flatPointList = (0, _utils.flatMapDeepArray)(allPoints, function (_ref2) {\n    var points = _ref2.points;\n    return points;\n  });\n  var voronoiDiagram = (0, _d3Voronoi.voronoi)().x(function (d) {\n    return d.x + radius + (Math.random() - 0.5);\n  }).y(function (d) {\n    return d.y + radius + (Math.random() - 0.5);\n  }).size([radius * 2, radius * 2])(flatPointList);\n  return {\n    allPoints: allPoints,\n    scales: scales,\n    offsetAngles: offsetAngles,\n    voronoiDiagram: voronoiDiagram,\n    radius: radius\n  };\n}\n\nfunction Radar(props) {\n  var data = props.data,\n      width = props.width,\n      height = props.height,\n      padding = props.padding,\n      domainMax = props.domainMax,\n      style = props.style,\n      onHover = props.onHover,\n      highlighted = props.highlighted,\n      onAxisLabelClick = props.onAxisLabelClick,\n      onAxisLabelMouseover = props.onAxisLabelMouseover,\n      axisLabelTextStyle = props.axisLabelTextStyle;\n  var converted = convertData(props);\n\n  if (!converted) {\n    return null;\n  }\n\n  var allPoints = converted.allPoints,\n      scales = converted.scales,\n      offsetAngles = converted.offsetAngles,\n      radius = converted.radius,\n      voronoiDiagram = converted.voronoiDiagram;\n  var highlightedSetKey = highlighted ? highlighted.setKey : null;\n  var backgroundScale = scales[data.variables[0].key];\n  var colors = {};\n  (0, _utils.forEachArray)(allPoints, function (_ref3, idx) {\n    var setKey = _ref3.setKey,\n        color = _ref3.color;\n\n    if (color) {\n      colors[setKey] = color;\n    } else {\n      colors[setKey] = _d3ScaleChromatic.schemeCategory10[idx];\n    }\n  });\n\n  var _partition = (0, _partition3.default)(allPoints, function (_ref4) {\n    var setKey = _ref4.setKey;\n    return setKey === highlightedSetKey;\n  }),\n      _partition2 = _slicedToArray(_partition, 2),\n      highlightedPoints = _partition2[0],\n      regularPoints = _partition2[1];\n\n  return _react.default.createElement(_RadarWrapper.default, {\n    variables: data.variables,\n    width: width,\n    height: height,\n    padding: padding,\n    domainMax: domainMax,\n    style: style,\n    onHover: onHover,\n    highlighted: highlighted,\n    scales: scales,\n    backgroundScale: backgroundScale,\n    offsetAngles: offsetAngles,\n    voronoiDiagram: voronoiDiagram,\n    radius: radius,\n    highlightedPoint: highlightedPoints.length > 0 ? highlightedPoints[0] : null,\n    regularPoints: regularPoints,\n    colors: colors,\n    onAxisLabelClick: onAxisLabelClick,\n    onAxisLabelMouseover: onAxisLabelMouseover,\n    axisLabelTextStyle: axisLabelTextStyle\n  });\n}","map":null,"metadata":{},"sourceType":"script"}